[{"C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\index.js":"1","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\App.js":"2","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\PositiveCases.jsx":"3","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\Recovered.jsx":"4","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\PUI.jsx":"5","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\ThirdChart.jsx":"6","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\ShowDeath.jsx":"7","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\ShowPending.jsx":"8","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\ShowAC.jsx":"9","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\ShowTC.jsx":"10"},{"size":174,"mtime":1609577113484,"results":"11","hashOfConfig":"12"},{"size":6237,"mtime":1610678421030,"results":"13","hashOfConfig":"12"},{"size":7261,"mtime":1610680947917,"results":"14","hashOfConfig":"12"},{"size":5012,"mtime":1610606453412,"results":"15","hashOfConfig":"12"},{"size":8688,"mtime":1610677529406,"results":"16","hashOfConfig":"12"},{"size":5298,"mtime":1610616963953,"results":"17","hashOfConfig":"12"},{"size":1610,"mtime":1610680238211,"results":"18","hashOfConfig":"12"},{"size":5370,"mtime":1610677438610,"results":"19","hashOfConfig":"12"},{"size":1593,"mtime":1610680243701,"results":"20","hashOfConfig":"12"},{"size":5644,"mtime":1610680518220,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1k175rq",{"filePath":"25","messages":"26","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"24"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"24"},"C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\index.js",[],["51","52"],"C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\App.js",["53","54","55","56","57","58","59"],"\nimport './App.css';\nimport overall_data from './data/overall-statistics.csv';\nimport hospital_data from './data/hospital-data.csv'; \nimport { csv } from \"d3\";\nimport { useEffect, useState } from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport PositiveCases from './PositiveCases';\nimport ThirdChart from './ThirdChart';\nimport Recovered from './Recovered';\nimport PUI from './PUI';\nimport ShowDeath from './ShowDeath';\nimport ShowPending from './ShowPending';\nimport ShowAC from './ShowAC';\nimport ShowTC from './ShowTC';\n\nfunction App() {\n\n  const [ loadingData, setLoadingData ] = useState(true)\n  const [ overall, setOverall ] = useState()\n  const [ hospital, setHospital ] = useState()\n  const [ isDefault, setDefault ] = useState()\n  const [ buttonVal, setButtonVal ] = useState()\n  const [ showTC, setShowTC ] = useState()\n  const [ showAC, setShowAC ] = useState()\n  const [ showPending, setShowPending ] = useState()\n  const [ showDeath, setShowDeath ] = useState()\n\n  const labelMonth = [\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ]\n\n  function label_daily(month){\n    var days = 0\n    var arrDay = []\n    switch (month) {\n      case 0: days=30; break;\n      case 1: days=31; break;\n      case 2: days=31; break;\n      case 3: days=30; break;\n      case 4: days=31; break;\n      case 5: days=30; break;\n      case 6: days=31; break;\n    }\n\n    for(var i = 1; i < days+1; i ++){\n      arrDay.push(i)\n    }\n    return arrDay\n  }\n\n  //get data for all month (jumlah kes positif x jumlah recovered)\n  useEffect(()=>{\n    if(loadingData)\n    Promise.all([csv(overall_data), csv(hospital_data)]).then(results=>{\n      var data  = { tc: 0, it: 0, npui: 0, ppui: 0,  jkm: 0}\n      var oFinal = results[0][results[0].length-1]\n      var hFinal = results[1][results[1].length-1]\n      data.tc = oFinal.jumlahKesPositif\n      data.it = hFinal.dirawatJumlah\n      data.npui = oFinal.kesPUINegatif\n\n      results[0].forEach(value=>{\n        data.ppui += parseInt(value.kesPUIPending)\n      })\n\n      data.jkm = oFinal.jumlahKesMati\n      setButtonVal(data)\n      setOverall(results[0])\n      setHospital(results[1])\n      setDefault(true)\n      setLoadingData(false)\n\n    })\n  }, [])\n\n  function button_view(button){\n    setDefault(false)\n    switch (button) {\n      case 'tc':\n        setShowTC(true)\n        setShowAC(false)\n        setShowPending(false)\n        setShowDeath(false)\n      break;\n      case 'ac':\n        setShowTC(false)\n        setShowAC(true)\n        setShowPending(false)\n        setShowDeath(false)\n      break;\n      case 'jkm':\n        setShowTC(false)\n        setShowDeath(true)\n        setShowAC(false)\n        setShowPending(false)\n      break;\n      case 'ppui':\n        setShowTC(false)\n        setShowPending(true)\n        setShowAC(false)\n        setShowDeath(false)\n      break;\n    }\n  }\n\n  function view_default(){\n    setDefault(true)\n    setShowTC(false)\n    setShowPending(false)\n    setShowAC(false)\n    setShowDeath(false)\n  }\n\n  return (\n    <div className=\"container lilita\">\n\n      <div className='brand-name' onClick={()=>view_default()}>\n          Sarawak COVID-19 Data Visualization Dashboard\n          <div className=\"brand-date\">\n            (June 2020 - December 2020)\n          </div>\n      </div>\n\n      <div className='top-nav'>\n        {/*  #ffd369 #ff884b #f05454 #*/}\n        <div className='button' onClick={()=>button_view('tc')}> \n            <div className='value' style={{backgroundColor:'rgb(255, 242, 0)'}}>\n              {buttonVal && buttonVal.tc}\n            </div>\n            Total Cases\n        </div>\n        <div className='button' onClick={()=>button_view('ac')}>\n            <div className='value' style={{backgroundColor:'rgb(255, 127, 39'}}>\n              {buttonVal && buttonVal.it}\n            </div>\n            Active Cases\n        </div>\n        {/* <div className='button'>\n            <div className='value' style={{backgroundColor: '#16c79a'}}>\n              {buttonVal && buttonVal.npui}\n            </div>\n            Negatives\n        </div> */}\n        <div className='button' onClick={()=>button_view('jkm')}>\n            <div className='value' style={{backgroundColor: 'rgb(237, 28, 36)'}}>\n              {buttonVal && buttonVal.jkm}\n            </div>\n            Total Death\n        </div>\n        <div className='button' onClick={()=>button_view('ppui')}>\n            <div className='value' style={{backgroundColor: '#a6a9b6'}}>\n              {buttonVal && buttonVal.ppui}\n            </div>\n            Pending PUI\n        </div>\n      </div>\n\n      <div className='vars' style={{display: !isDefault ? 'flex' : 'none', width:'100%', alignItems:'center', justifyContent:'center'}}>\n          {showDeath && <ShowDeath hospital={hospital} />}\n          {showPending && <ShowPending overall={overall} labelMonth={labelMonth} label_daily={label_daily} />}\n          {showAC && <ShowAC hospital={hospital} />}\n          {showTC && <ShowTC overall={overall} labelMonth={labelMonth} label_daily={label_daily} />}\n      </div>\n      <div className='default' style={{display: isDefault ? 'flex' : 'none', flexDirection:'column'}}>\n        <div className='row-1' style={{display: 'flex', flexDirection: 'row'}}>\n            <div className='default-chart new-cases'>\n              { isDefault && <PositiveCases overall={overall} hospital={hospital} labelMonth={labelMonth} label_daily={label_daily} />}\n            </div>\n            <div className='default-chart pui'>\n              { isDefault && <PUI overall={overall} labelMonth={labelMonth} label_daily={label_daily} />}\n            </div>\n            {/* <div className='default-chart recovered'>\n              { isDefault && <Recovered overall={overall} labelMonth={labelMonth} label_daily={label_daily} />}\n            </div> */}\n        </div>\n        <div className='row-2' style={{display: 'flex', flexDirection: 'row', alignItems:'center', justifyContent:'center'}}>\n            {/* <div className='default-chart death'>\n              { isDefault && <ThirdChart overall={overall} labelMonth={labelMonth} label_daily={label_daily} />}\n            </div> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\PositiveCases.jsx",["60","61","62"],"C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\Recovered.jsx",["63","64","65"],"import React, { useEffect, useState } from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\n\r\nexport default function Recovered({overall, labelMonth, label_daily}) {\r\n\r\n    const [ isDaily, setDaily ] = useState()\r\n    const [ dailyChart , setDailyChart ] = useState()\r\n    const [ monthlyChart , setMonthlyChart ] = useState()\r\n    const [ chartTitle, setChartTitle ] = useState()\r\n\r\n    function setDailyView(att, month){\r\n        setMonthlyChart()\r\n        const days = label_daily(month)\r\n\r\n        var data = []\r\n        overall.forEach(row=>{\r\n            var m = parseInt(row.Tarikh.split('/')[1])-6\r\n            if(m == month){\r\n                data.push(row.jumlahTelahSembuhDiscaj)\r\n            }\r\n        })\r\n\r\n        setDaily(true)\r\n        setDailyChart({\r\n            labels: days,\r\n            datasets: [\r\n            {\r\n                type:'bar',\r\n                fill: false,\r\n                label: att,\r\n                data: data,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n            ]\r\n        })\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        var mpostives = []\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] = value.jumlahTelahSembuhDiscaj\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n                type:'bar',\r\n                fill: false,\r\n                label: 'Recovered and Discharged',\r\n                data: mpostives,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setDaily(false)\r\n        setChartTitle('Total Recovered and Discharged')\r\n    }, [])\r\n\r\n\r\n    \r\n    var options = {\r\n        onClick: (event, elements) => {\r\n            const chart = elements[0]._chart;\r\n            const element = chart.getElementAtEvent(event)[0];\r\n            const xLabel = chart.data.labels[element._index];\r\n            const dataset = chart.data.datasets[element._datasetIndex];\r\n    \r\n            const month = labelMonth.indexOf(xLabel)\r\n\r\n            console.log(dataset.label + month)\r\n    \r\n            if(element._datasetIndex == 0){\r\n            setDailyView(dataset.label, month)\r\n\r\n            setChartTitle(`${dataset.label} for ${xLabel}`)\r\n\r\n            }\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Total Recovered and Discharged',\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n            }]\r\n        } \r\n    }\r\n\r\n    var dailyOpt = {\r\n        title: {\r\n            display: true,\r\n            text: chartTitle,\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n            }]\r\n        } \r\n    }\r\n\r\n    function return_monthly(){\r\n        setDailyChart()\r\n        var mpostives = []\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] = value.jumlahTelahSembuhDiscaj\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n                type:'bar',\r\n                fill: false,\r\n                label: 'Recovered and Discharged',\r\n                data: mpostives,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setChartTitle('Total Recovered and Discharged')\r\n        setDaily(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className = 'default-chart-container'  style={{display: !isDaily ? 'block': 'none'}}>\r\n                {monthlyChart && <Bar data={monthlyChart} options={options} />}\r\n            </div>\r\n            <div className = 'default-chart-container'  style={{display: isDaily ? 'block': 'none'}}>\r\n                {dailyChart && <Bar data={dailyChart} options={dailyOpt} />}\r\n                <div className='monthly' onClick={()=>return_monthly()} style={{color:'white'}}>\r\n                Monthly\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\PUI.jsx",["66","67","68","69","70","71","72"],"import React, { useEffect, useState } from 'react'\r\nimport { Bar, HorizontalBar, Line } from 'react-chartjs-2'\r\n\r\nexport default function PUI({overall, labelMonth, label_daily}) {\r\n\r\n    const [ isDaily, setDaily ] = useState()\r\n    const [ dailyChart , setDailyChart ] = useState()\r\n    const [ monthlyChart , setMonthlyChart ] = useState()\r\n    const [ chartTitle, setChartTitle ] = useState()\r\n\r\n    function setDailyView(att, month){\r\n        setMonthlyChart()\r\n        console.log(att)\r\n        var data = []\r\n        switch (att) {\r\n            case 'New Cases':\r\n                overall.forEach(row=>{\r\n                    var m = parseInt(row.Tarikh.split('/')[1])-6\r\n                    if(m == month){\r\n                        data.push(row.kesPUIBaru)\r\n                    }\r\n                })\r\n            break;\r\n            case 'Negatives':\r\n                overall.forEach(row=>{\r\n                    var m = parseInt(row.Tarikh.split('/')[1])-6\r\n                    if(m == month){\r\n                        data.push(row.kesPUINegatif)\r\n                    }\r\n                })\r\n            break;\r\n            case 'Total':\r\n                overall.forEach(row=>{\r\n                    var m = parseInt(row.Tarikh.split('/')[1])-6\r\n                    if(m == month){\r\n                        data.push(row.jumlahKesPUI)\r\n                    }\r\n                })\r\n            break;\r\n        }\r\n        const days = label_daily(month)\r\n\r\n        setDaily(true)\r\n        setDailyChart({\r\n            labels: days,\r\n            datasets: [\r\n            {\r\n                type:'bar',\r\n                fill: false,\r\n                label: att,\r\n                data: data,\r\n                backgroundColor: 'rgba(255, 123, 84, 1)',\r\n                borderColor: 'rgba(255, 123, 84, 1)',\r\n            },\r\n            ]\r\n        })\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        var dataPUI = [], dataNPUI = [], dataPUIB = [0, 0, 0, 0, 0, 0, 0]\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            dataPUI[month] = value.jumlahKesPUI\r\n            dataNPUI[month] = value.kesPUINegatif\r\n            dataPUIB[month] += parseInt(value.kesPUIBaru)\r\n        })\r\n\r\n        dataPUIB.forEach((value, index)=>{\r\n            dataPUIB[index] = parseInt(value / label_daily(index).length)\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n                type:'line',\r\n                fill: true,\r\n                yAxisID: 'l',\r\n                label: 'New Cases',\r\n                data: dataPUIB,\r\n                backgroundColor: 'rgba(187, 34, 5, 1)',\r\n                borderColor: 'rgba(187, 34, 5, 1)',\r\n            },\r\n            {\r\n                type:'line',\r\n                fill: true,\r\n                yAxisID: 'r',\r\n                label: 'Negatives',\r\n                data: dataNPUI,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n                borderColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n            {\r\n                type:'line',\r\n                fill: true,\r\n                label: 'Total',\r\n                data: dataPUI,\r\n                yAxisID: 'r',\r\n                backgroundColor: 'rgba(255, 123, 84, 1)',\r\n                borderColor: 'rgba(255, 123, 84, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setDaily(false)\r\n    }, [])\r\n\r\n\r\n    \r\n    var options = {\r\n        onClick: (event, elements) => {\r\n            if(elements.length>0){\r\n                const chart = elements[0]._chart;\r\n                const element = chart.getElementAtEvent(event)[0];\r\n                const xLabel = chart.data.labels[element._index];\r\n                const dataset = chart.data.datasets[element._datasetIndex];\r\n        \r\n                const month = labelMonth.indexOf(xLabel)\r\n        \r\n                setDailyView(dataset.label, month)\r\n    \r\n                setChartTitle(`${dataset.label} for ${xLabel}`)\r\n            \r\n\r\n            }\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Person Under Investigations (PUI)',\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    type: 'linear',\r\n                    id: 'r',\r\n                    position: 'right',\r\n                    ticks: {\r\n                        beginAtZero:true,\r\n                        fontColor: 'white'\r\n                    },\r\n                    gridLines:{\r\n                        color: '#393e46'\r\n                    }\r\n                },\r\n                {\r\n                    type: 'linear',\r\n                    id: 'l',\r\n                    position: 'left',\r\n                    ticks: {\r\n                        beginAtZero:true,\r\n                        fontColor: 'white'\r\n                    },\r\n                    gridLines:{\r\n                        color: '#393e46'\r\n                    }\r\n                },\r\n            ],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines:{\r\n                    color: '#393e46'\r\n                }\r\n            }]\r\n        } \r\n    }\r\n\r\n    var dailyOpt = {\r\n        title: {\r\n            display: true,\r\n            text: chartTitle,\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [\r\n                {\r\n                    type: 'linear',\r\n                    id: 'l',\r\n                    position: 'left',\r\n                    ticks: {\r\n                        beginAtZero:true,\r\n                        fontColor: 'white'\r\n                    },\r\n                    gridLines:{\r\n                        color: '#393e46'\r\n                    }\r\n                },\r\n            ],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines:{\r\n                    color: '#393e46'\r\n                }\r\n            }]\r\n        } \r\n    }\r\n\r\n    function return_monthly(){\r\n        var dataPUI = [], dataNPUI = [], dataPUIB = [0, 0, 0, 0, 0, 0, 0]\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            dataPUI[month] = value.jumlahKesPUI\r\n            dataNPUI[month] = value.kesPUINegatif\r\n            dataPUIB[month] += parseInt(value.kesPUIBaru)\r\n        })\r\n\r\n        dataPUIB.forEach((value, index)=>{\r\n            dataPUIB[index] = parseInt(value / label_daily(index).length)\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n                type:'line',\r\n                fill: true,\r\n                yAxisID: 'l',\r\n                label: 'New Cases',\r\n                data: dataPUIB,\r\n                backgroundColor: 'rgba(187, 34, 5, 1)',\r\n                borderColor: 'rgba(187, 34, 5, 1)',\r\n            },\r\n            {\r\n                type:'line',\r\n                fill: true,\r\n                yAxisID: 'r',\r\n                label: 'Negatives',\r\n                data: dataNPUI,\r\n                backgroundColor: 'rgba(50, 224, 196, 1)',\r\n                borderColor: 'rgba(50, 224, 196, 1)',\r\n            },\r\n            {\r\n                type:'line',\r\n                fill: true,\r\n                label: 'Total',\r\n                data: dataPUI,\r\n                yAxisID: 'r',\r\n                backgroundColor: 'rgba(255, 123, 84, 1)',\r\n                borderColor: 'rgba(255, 123, 84, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setDaily(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className = 'default-chart-container'  style={{display: !isDaily ? 'block': 'none', width:'550px'}}>\r\n                {monthlyChart && <Line height={250} data={monthlyChart} options={options} />}\r\n            </div>\r\n            <div className = 'default-chart-container'  style={{display: isDaily ? 'block': 'none', width:'550px'}}>\r\n                {dailyChart && <Line height={250} data={dailyChart} options={dailyOpt} />}\r\n                <div className='monthly' onClick={()=>return_monthly()} style={{color:'white'}}>\r\n                Monthly\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\ThirdChart.jsx",["73","74","75","76","77"],"import React, { useEffect, useState } from 'react'\r\nimport { Bar, Line } from 'react-chartjs-2'\r\n\r\nexport default function ThirdChart({overall, labelMonth, label_daily}) {\r\n\r\n    const [ isDaily, setDaily ] = useState()\r\n    const [ dailyChart , setDailyChart ] = useState()\r\n    const [ monthlyChart , setMonthlyChart ] = useState()\r\n    const [ chartTitle, setChartTitle ] = useState()\r\n\r\n    function setDailyView(att, month){\r\n        setMonthlyChart()\r\n        const days = label_daily(month)\r\n\r\n        var data = [], data2 = []\r\n        overall.forEach(row=>{\r\n            var m = parseInt(row.Tarikh.split('/')[1])-6\r\n            if(m == month){\r\n                data.push(row.jumlahKesMati)\r\n            }\r\n        })\r\n\r\n        setDaily(true)\r\n        setDailyChart({\r\n            labels: days,\r\n            datasets: [\r\n                {\r\n                    type:'line',\r\n                    fill: true,\r\n                    label: 'Death Cases',\r\n                    data: data,\r\n                    backgroundColor: 'rgba(240, 84, 84, 1)',\r\n                    borderColor: 'rgba(240, 84, 84, 1)',\r\n                    lineTension: '0.2'\r\n                },\r\n            ]\r\n        })\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        var mpostives = []\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] = value.jumlahKesMati\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n                fill: true,\r\n                label: 'Death Cases',\r\n                data: mpostives,\r\n                backgroundColor: 'rgba(240, 84, 84, 1)',\r\n                borderColor: 'rgba(240, 84, 84, 1)',\r\n                lineTension: '0.2'\r\n            },\r\n          ]\r\n        })\r\n        setDaily(false)\r\n        setChartTitle('Total Death')\r\n    }, [])\r\n\r\n\r\n    \r\n    var options = {\r\n        onClick: (event, elements) => {\r\n            if(elements.length>0){\r\n                const chart = elements[0]._chart;\r\n                const element = chart.getElementAtEvent(event)[0];\r\n                const xLabel = chart.data.labels[element._index];\r\n                const dataset = chart.data.datasets[element._datasetIndex];\r\n        \r\n                const month = labelMonth.indexOf(xLabel)\r\n    \r\n                console.log(dataset.label + month)\r\n        \r\n                if(element._datasetIndex == 0){\r\n                setDailyView(dataset.label, month)\r\n    \r\n                setChartTitle(`${dataset.label} for ${xLabel}`)\r\n            }\r\n\r\n            }\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Total Death',\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n            }]\r\n        } \r\n    }\r\n\r\n    var dailyOpt = {\r\n        title: {\r\n            display: true,\r\n            text: chartTitle,\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n            }]\r\n        } \r\n    }\r\n\r\n    function return_monthly(){\r\n        setDailyChart()\r\n        var mpostives = []\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] = value.jumlahKesMati\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n              type:'line',\r\n              fill: true,\r\n              label: 'Death Cases',\r\n              data: mpostives,\r\n              backgroundColor: 'rgba(240, 84, 84, 1)',\r\n              borderColor: 'rgba(240, 84, 84, 1)',\r\n              lineTension: '0.2'\r\n            },\r\n          ]\r\n        })\r\n        setChartTitle('New Positive Cases')\r\n        setDaily(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className = 'default-chart-container'  style={{display: !isDaily ? 'block': 'none'}}>\r\n                {monthlyChart && <Bar data={monthlyChart} options={options} />}\r\n            </div>\r\n            <div className = 'default-chart-container'  style={{display: isDaily ? 'block': 'none'}}>\r\n                {dailyChart && <Bar data={dailyChart} options={dailyOpt} />}\r\n                <div  className='monthly' onClick={()=>return_monthly()} style={{color:'white'}}>\r\n                Monthly\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\ShowDeath.jsx",["78"],"import React, { useEffect, useState } from 'react'\r\nimport { Doughnut } from 'react-chartjs-2'\r\n\r\nexport default function ShowDeath({hospital}) {\r\n\r\n    //matiKCH,matiSIBU,matiBNTL,matiMIRI,matiSGB\r\n    const [ donutData, setDonutData ] = useState()\r\n\r\n    useEffect(()=>{\r\n        var data = []\r\n        hospital.forEach(value=>{\r\n            data[0] = value.matiKCH\r\n            data[1] = value.matiBNTL\r\n            data[2] = value.matiMIRI\r\n            data[3] = value.matiSGB\r\n        })\r\n\r\n        setDonutData({\r\n            maintainAspectRatio: true,\r\n            responsive: true,\r\n            labels: [\"Kuching\", \"Bintulu\", \"Miri\", \"Sg. Buloh\"],\r\n            datasets: [\r\n              {\r\n                data: data,\r\n                backgroundColor: ['#f0a500', '#006a71', '#e97171', '#5d54a4'],\r\n                hoverBackgroundColor: ['#f0a500', '#006a71', '#e97171', '#5d54a4']\r\n              }\r\n            ]\r\n        })\r\n    })\r\n\r\n    const options = {\r\n      title: {\r\n          display: true,\r\n          text: 'Death Cases',\r\n          fontColor: 'white',\r\n          fontSize: 17\r\n      },\r\n        legend: {\r\n          display: true,\r\n          position: \"right\",\r\n          labels:{\r\n              fontSize: 17,\r\n              fontColor: 'white'\r\n          }\r\n        },\r\n        elements: {\r\n          arc: {\r\n            borderWidth: 0\r\n          }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{width:'500px', height: '500px', display:'flex', alignItems:'center'}}>\r\n            <Doughnut height={200} data={{...donutData, }} options={{...options}} />\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\ShowPending.jsx",["79","80","81","82"],"import React, { useEffect, useState } from 'react'\r\nimport { Bar, HorizontalBar } from 'react-chartjs-2'\r\n\r\nexport default function ShowPending({overall, labelMonth, label_daily}) {\r\n\r\n    const [ isDaily, setDaily ] = useState()\r\n    const [ dailyChart , setDailyChart ] = useState()\r\n    const [ monthlyChart , setMonthlyChart ] = useState()\r\n    const [ chartTitle, setChartTitle ] = useState()\r\n\r\n    function setDailyView(att, month){\r\n        setMonthlyChart()\r\n        const days = label_daily(month)\r\n\r\n        var data = []\r\n        overall.forEach(row=>{\r\n            var m = parseInt(row.Tarikh.split('/')[1])-6\r\n            if(m == month){\r\n                data.push(row.kesPUIPending)\r\n            }\r\n        })\r\n\r\n        setDaily(true)\r\n        setDailyChart({\r\n            labels: days,\r\n            datasets: [\r\n            {\r\n                fill: false,\r\n                label: att,\r\n                data: data,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n            ]\r\n        })\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        var mpostives = [ 0, 0, 0, 0, 0, 0, 0 ]\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            console.log(value)\r\n            mpostives[month] += parseInt(value.kesPUIPending)\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n                fill: false,\r\n                label: 'Pending PUI',\r\n                data: mpostives,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setDaily(false)\r\n        setChartTitle('Total Pending PUI')\r\n    }, [])\r\n\r\n\r\n    \r\n    var options = {\r\n        onClick: (event, elements) => {\r\n            const chart = elements[0]._chart;\r\n            const element = chart.getElementAtEvent(event)[0];\r\n            const xLabel = chart.data.labels[element._index];\r\n            const dataset = chart.data.datasets[element._datasetIndex];\r\n    \r\n            const month = labelMonth.indexOf(xLabel)\r\n\r\n            console.log(dataset.label + month)\r\n    \r\n            if(element._datasetIndex == 0){\r\n            setDailyView(dataset.label, month)\r\n\r\n            setChartTitle(`${dataset.label} for ${xLabel}`)\r\n\r\n            }\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Total Pending PUI',\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines:{\r\n                    color: '#393e46'\r\n                }\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines:{\r\n                    color: '#393e46'\r\n                }\r\n            }]\r\n        } \r\n    }\r\n\r\n    var dailyOpt = {\r\n        title: {\r\n            display: true,\r\n            text: chartTitle,\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines:{\r\n                    color: '#393e46'\r\n                }\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines:{\r\n                    color: '#393e46'\r\n                }\r\n            }]\r\n        } \r\n    }\r\n\r\n    function return_monthly(){\r\n        setDailyChart()\r\n        var mpostives = []\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] = value.kesPUIPending\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n                fill: false,\r\n                label: 'Pending PUI',\r\n                data: mpostives,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setChartTitle('Total Pending PUI')\r\n        setDaily(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className = 'default-chart-container'  style={{display: !isDaily ? 'block': 'none', width:'50%', alignItems:'center'}}>\r\n                {monthlyChart && <HorizontalBar height={175} data={monthlyChart} options={options} />}\r\n            </div>\r\n            <div className = 'default-chart-container'  style={{display: isDaily ? 'block': 'none', width: '50%', alignItems:'center'}}>\r\n                {dailyChart && <HorizontalBar height={175} data={dailyChart} options={dailyOpt} />}\r\n                <div className='monthly' onClick={()=>return_monthly()} style={{color:'white'}}>\r\n                Monthly\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\ShowAC.jsx",["83"],"import React, { useEffect, useState } from 'react'\r\nimport { Pie } from 'react-chartjs-2'\r\n\r\nexport default function ShowAC({hospital}) {\r\n\r\n    const [ pieData, setPieData ] = useState()\r\n\r\n    useEffect(()=>{\r\n\r\n        var data = []\r\n        hospital.forEach(value=>{\r\n            data[0] = value.dirawatKCH\r\n            data[1] = value.dirawatBNTL\r\n            data[2] = value.dirawatMIRI\r\n            data[3] = value.dirawatSGB\r\n        })\r\n\r\n        setPieData({\r\n            maintainAspectRatio: true,\r\n            responsive: true,\r\n            labels: [\"Kuching\", \"Bintulu\", \"Miri\", \"Sg. Buloh\"],\r\n            datasets: [\r\n              {\r\n                data: data,\r\n                backgroundColor: ['#f0a500', '#006a71', '#e97171', '#5d54a4'],\r\n                hoverBackgroundColor: ['#f0a500', '#006a71', '#e97171', '#5d54a4']\r\n              }\r\n            ]\r\n        })\r\n\r\n    }, [])\r\n\r\n    const options = {\r\n        title: {\r\n            display: true,\r\n            text: 'Patient In Treatment',\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n          display: true,\r\n          position: \"right\",\r\n          labels:{\r\n              fontSize: 17,\r\n              fontColor: 'white'\r\n          }\r\n        },\r\n        elements: {\r\n          arc: {\r\n            borderWidth: 0\r\n          }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{width:'500px', height: '500px', display:'flex', justifyContent:'start', alignItems:'center'}}>\r\n            <Pie height={200}  data={pieData} options={options} />\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\irfan\\Documents\\data-visualization\\prototype\\src\\ShowTC.jsx",["84","85","86","87","88"],"import React, { useEffect, useState } from 'react'\r\nimport { Bar, HorizontalBar, Line } from 'react-chartjs-2'\r\n\r\nexport default function ShowTC({overall, labelMonth, label_daily}) {\r\n\r\n    const [ isDaily, setDaily ] = useState()\r\n    const [ dailyChart , setDailyChart ] = useState()\r\n    const [ monthlyChart , setMonthlyChart ] = useState()\r\n    const [ chartTitle, setChartTitle ] = useState()\r\n\r\n    function setDailyView(att, month){\r\n        setMonthlyChart()\r\n        const days = label_daily(month)\r\n\r\n        var data = []\r\n        overall.forEach(row=>{\r\n            var m = parseInt(row.Tarikh.split('/')[1])-6\r\n            if(m == month){\r\n                data.push(row.jumlahKesPositif)\r\n            }\r\n        })\r\n\r\n        setDaily(true)\r\n        setDailyChart({\r\n            labels: days,\r\n            datasets: [\r\n            {\r\n                fill: true,\r\n                label: att,\r\n                data: data,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n                borderColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n            ]\r\n        })\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        var mpostives = [ 0, 0, 0, 0, 0, 0, 0 ]\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            console.log(value)\r\n            mpostives[month] = parseInt(value.jumlahKesPositif)\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n                fill: true,\r\n                label: 'Positive Cases',\r\n                data: mpostives,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n                borderColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setDaily(false)\r\n        setChartTitle('Total Positive Cases')\r\n    }, [])\r\n\r\n\r\n    \r\n    var options = {\r\n        onClick: (event, elements) => {\r\n            if(elements.length > 0){\r\n                const chart = elements[0]._chart;\r\n                const element = chart.getElementAtEvent(event)[0];\r\n                const xLabel = chart.data.labels[element._index];\r\n                const dataset = chart.data.datasets[element._datasetIndex];\r\n        \r\n                const month = labelMonth.indexOf(xLabel)\r\n    \r\n                console.log(dataset.label + month)\r\n        \r\n                if(element._datasetIndex == 0){\r\n                setDailyView(dataset.label, month)\r\n    \r\n                setChartTitle(`${dataset.label} for ${xLabel}`)\r\n            }\r\n\r\n            }\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Total Positive Cases',\r\n            fontColor: 'white',\r\n            fontSize: 17,\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines:{\r\n                    color: '#393e46'\r\n                }\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines:{\r\n                    color: '#393e46'\r\n                }\r\n            }]\r\n        } \r\n    }\r\n\r\n    var dailyOpt = {\r\n        title: {\r\n            display: true,\r\n            text: chartTitle,\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines:{\r\n                    color: '#393e46'\r\n                }\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n                gridLines:{\r\n                    color: '#393e46'\r\n                }\r\n            }]\r\n        } \r\n    }\r\n\r\n    function return_monthly(){\r\n        setDailyChart()\r\n        var mpostives = []\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] = value.jumlahKesPositif\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n                fill: true,\r\n                label: 'Positive Cases',\r\n                data: mpostives,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n                borderColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setChartTitle('Total Positive Cases')\r\n        setDaily(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className = 'default-chart-container'  style={{display: !isDaily ? 'block': 'none', width:'50%', alignItems:'center'}}>\r\n                {monthlyChart && <Line height={175} data={monthlyChart} options={options} />}\r\n            </div>\r\n            <div className = 'default-chart-container'  style={{display: isDaily ? 'block': 'none', width: '50%', alignItems:'center'}}>\r\n                {dailyChart && <Line height={175} data={dailyChart} options={dailyOpt} />}\r\n                <div className='monthly' onClick={()=>return_monthly()} style={{color:'white'}}>\r\n                Monthly\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":7,"column":10,"nodeType":"95","messageId":"96","endLine":7,"endColumn":13},{"ruleId":"93","severity":1,"message":"97","line":7,"column":15,"nodeType":"95","messageId":"96","endLine":7,"endColumn":19},{"ruleId":"93","severity":1,"message":"98","line":9,"column":8,"nodeType":"95","messageId":"96","endLine":9,"endColumn":18},{"ruleId":"93","severity":1,"message":"99","line":10,"column":8,"nodeType":"95","messageId":"96","endLine":10,"endColumn":17},{"ruleId":"100","severity":1,"message":"101","line":42,"column":5,"nodeType":"102","messageId":"103","endLine":50,"endColumn":6},{"ruleId":"104","severity":1,"message":"105","line":81,"column":6,"nodeType":"106","endLine":81,"endColumn":8,"suggestions":"107"},{"ruleId":"100","severity":1,"message":"101","line":85,"column":5,"nodeType":"102","messageId":"103","endLine":110,"endColumn":6},{"ruleId":"108","severity":1,"message":"109","line":18,"column":18,"nodeType":"110","messageId":"111","endLine":18,"endColumn":20},{"ruleId":"104","severity":1,"message":"112","line":78,"column":8,"nodeType":"106","endLine":78,"endColumn":10,"suggestions":"113"},{"ruleId":"108","severity":1,"message":"109","line":94,"column":42,"nodeType":"110","messageId":"111","endLine":94,"endColumn":44},{"ruleId":"108","severity":1,"message":"109","line":18,"column":18,"nodeType":"110","messageId":"111","endLine":18,"endColumn":20},{"ruleId":"104","severity":1,"message":"114","line":59,"column":8,"nodeType":"106","endLine":59,"endColumn":10,"suggestions":"115"},{"ruleId":"108","severity":1,"message":"109","line":74,"column":38,"nodeType":"110","messageId":"111","endLine":74,"endColumn":40},{"ruleId":"93","severity":1,"message":"94","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":13},{"ruleId":"93","severity":1,"message":"116","line":2,"column":15,"nodeType":"95","messageId":"96","endLine":2,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":15,"column":9,"nodeType":"102","messageId":"103","endLine":40,"endColumn":10},{"ruleId":"108","severity":1,"message":"109","line":19,"column":26,"nodeType":"110","messageId":"111","endLine":19,"endColumn":28},{"ruleId":"108","severity":1,"message":"109","line":27,"column":26,"nodeType":"110","messageId":"111","endLine":27,"endColumn":28},{"ruleId":"108","severity":1,"message":"109","line":35,"column":26,"nodeType":"110","messageId":"111","endLine":35,"endColumn":28},{"ruleId":"104","severity":1,"message":"117","line":105,"column":8,"nodeType":"106","endLine":105,"endColumn":10,"suggestions":"118"},{"ruleId":"93","severity":1,"message":"97","line":2,"column":15,"nodeType":"95","messageId":"96","endLine":2,"endColumn":19},{"ruleId":"93","severity":1,"message":"119","line":15,"column":24,"nodeType":"95","messageId":"96","endLine":15,"endColumn":29},{"ruleId":"108","severity":1,"message":"109","line":18,"column":18,"nodeType":"110","messageId":"111","endLine":18,"endColumn":20},{"ruleId":"104","severity":1,"message":"114","line":62,"column":8,"nodeType":"106","endLine":62,"endColumn":10,"suggestions":"120"},{"ruleId":"108","severity":1,"message":"109","line":78,"column":42,"nodeType":"110","messageId":"111","endLine":78,"endColumn":44},{"ruleId":"104","severity":1,"message":"121","line":9,"column":5,"nodeType":"95","endLine":9,"endColumn":14,"suggestions":"122"},{"ruleId":"93","severity":1,"message":"94","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":13},{"ruleId":"108","severity":1,"message":"109","line":18,"column":18,"nodeType":"110","messageId":"111","endLine":18,"endColumn":20},{"ruleId":"104","severity":1,"message":"114","line":58,"column":8,"nodeType":"106","endLine":58,"endColumn":10,"suggestions":"123"},{"ruleId":"108","severity":1,"message":"109","line":73,"column":38,"nodeType":"110","messageId":"111","endLine":73,"endColumn":40},{"ruleId":"104","severity":1,"message":"124","line":31,"column":8,"nodeType":"106","endLine":31,"endColumn":10,"suggestions":"125"},{"ruleId":"93","severity":1,"message":"94","line":2,"column":10,"nodeType":"95","messageId":"96","endLine":2,"endColumn":13},{"ruleId":"93","severity":1,"message":"116","line":2,"column":15,"nodeType":"95","messageId":"96","endLine":2,"endColumn":28},{"ruleId":"108","severity":1,"message":"109","line":18,"column":18,"nodeType":"110","messageId":"111","endLine":18,"endColumn":20},{"ruleId":"104","severity":1,"message":"114","line":60,"column":8,"nodeType":"106","endLine":60,"endColumn":10,"suggestions":"126"},{"ruleId":"108","severity":1,"message":"109","line":76,"column":42,"nodeType":"110","messageId":"111","endLine":76,"endColumn":44},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'Bar' is defined but never used.","Identifier","unusedVar","'Line' is defined but never used.","'ThirdChart' is defined but never used.","'Recovered' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadingData'. Either include it or remove the dependency array.","ArrayExpression",["129"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'hospital', 'labelMonth', and 'overall'. Either include them or remove the dependency array. If 'setMonthlyChart' needs the current value of 'labelMonth', you can also switch to useReducer instead of useState and read 'labelMonth' in the reducer.",["130"],"React Hook useEffect has missing dependencies: 'labelMonth' and 'overall'. Either include them or remove the dependency array. If 'setMonthlyChart' needs the current value of 'labelMonth', you can also switch to useReducer instead of useState and read 'labelMonth' in the reducer.",["131"],"'HorizontalBar' is defined but never used.","React Hook useEffect has missing dependencies: 'labelMonth', 'label_daily', and 'overall'. Either include them or remove the dependency array. If 'label_daily' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["132"],"'data2' is assigned a value but never used.",["133"],"React Hook useEffect contains a call to 'setDonutData'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [hospital] as a second argument to the useEffect Hook.",["134"],["135"],"React Hook useEffect has a missing dependency: 'hospital'. Either include it or remove the dependency array.",["136"],["137"],"no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"142","fix":"146"},{"desc":"147","fix":"148"},{"desc":"142","fix":"149"},{"desc":"150","fix":"151"},{"desc":"142","fix":"152"},"Update the dependencies array to be: [loadingData]",{"range":"153","text":"154"},"Update the dependencies array to be: [hospital, labelMonth, overall]",{"range":"155","text":"156"},"Update the dependencies array to be: [labelMonth, overall]",{"range":"157","text":"158"},"Update the dependencies array to be: [labelMonth, label_daily, overall]",{"range":"159","text":"160"},{"range":"161","text":"158"},"Add dependencies array: [hospital]",{"range":"162","text":"163"},{"range":"164","text":"158"},"Update the dependencies array to be: [hospital]",{"range":"165","text":"166"},{"range":"167","text":"158"},[2251,2253],"[loadingData]",[2400,2402],"[hospital, labelMonth, overall]",[1730,1732],"[labelMonth, overall]",[3413,3415],"[labelMonth, label_daily, overall]",[1891,1893],[941,941],", [hospital]",[1707,1709],[895,897],"[hospital]",[1827,1829]]