{"version":3,"sources":["data/overall-statistics.csv","data/hospital-data.csv","PositiveCases.jsx","Death.jsx","Recovered.jsx","PUI.jsx","App.js","index.js"],"names":["PositiveCases","overall","labelMonth","label_daily","useState","isDaily","setDaily","dailyChart","setDailyChart","monthlyChart","setMonthlyChart","chartTitle","setChartTitle","useEffect","mpostives","forEach","value","month","parseInt","Tarikh","split","kesPositifBaru","labels","datasets","type","fill","label","data","backgroundColor","options","onClick","event","elements","chart","_chart","element","getElementAtEvent","xLabel","_index","dataset","_datasetIndex","indexOf","console","log","att","days","row","push","setDailyView","title","display","text","fontColor","fontSize","legend","position","scales","yAxes","ticks","beginAtZero","xAxes","dailyOpt","className","style","return_monthly","color","Death","jumlahKesMati","borderColor","lineTension","length","Recovered","jumlahTelahSembuhDiscaj","PUI","jumlahKesPUI","App","loadingData","setLoadingData","setOverall","setHospital","isDefault","setDefault","buttonVal","setButtonVal","arrDay","i","Promise","all","csv","overall_data","hospital_data","then","results","np","it","npui","ppui","oFinal","hFinal","jumlahKesPositif","dirawatJumlah","kesPUINegatif","kesPUIPending","flexDirection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.63e9b3c7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/overall-statistics.29c65aa3.csv\";","export default __webpack_public_path__ + \"static/media/hospital-data.cfebbe68.csv\";","import React, { useEffect, useState } from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\n\r\nexport default function PositiveCases({overall, labelMonth, label_daily}) {\r\n\r\n    const [ isDaily, setDaily ] = useState()\r\n    const [ dailyChart , setDailyChart ] = useState()\r\n    const [ monthlyChart , setMonthlyChart ] = useState()\r\n    const [ chartTitle, setChartTitle ] = useState()\r\n\r\n    function setDailyView(att, month){\r\n        setMonthlyChart()\r\n        const days = label_daily(month)\r\n\r\n        var data = []\r\n        overall.forEach(row=>{\r\n            var m = parseInt(row.Tarikh.split('/')[1])-6\r\n            if(m == month){\r\n                data.push(row.kesPositifBaru)\r\n            }\r\n        })\r\n\r\n        setDaily(true)\r\n        setDailyChart({\r\n            labels: days,\r\n            datasets: [\r\n            {\r\n                type:'bar',\r\n                fill: false,\r\n                label: att,\r\n                data: data,\r\n              backgroundColor: 'rgba(255, 211, 105, 1)',\r\n            },\r\n            ]\r\n        })\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        var mpostives = [0, 0, 0, 0, 0, 0, 0]\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] += parseInt(value.kesPositifBaru)\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n              type:'bar',\r\n              fill: false,\r\n              label: 'New Postive Cases',\r\n              data: mpostives,\r\n            backgroundColor: 'rgba(255, 211, 105, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setDaily(false)\r\n        setChartTitle('New Positive Cases')\r\n    }, [])\r\n\r\n\r\n    \r\n    var options = {\r\n        onClick: (event, elements) => {\r\n            const chart = elements[0]._chart;\r\n            const element = chart.getElementAtEvent(event)[0];\r\n            const xLabel = chart.data.labels[element._index];\r\n            const dataset = chart.data.datasets[element._datasetIndex];\r\n    \r\n            const month = labelMonth.indexOf(xLabel)\r\n\r\n            console.log(dataset.label + month)\r\n    \r\n            if(element._datasetIndex == 0){\r\n            setDailyView(dataset.label, month)\r\n\r\n            setChartTitle(`${dataset.label} for ${xLabel}`)\r\n\r\n            }\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'New Postive Cases',\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n            }]\r\n        } \r\n    }\r\n\r\n    var dailyOpt = {\r\n        title: {\r\n            display: true,\r\n            text: chartTitle,\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n            }]\r\n        } \r\n    }\r\n\r\n    function return_monthly(){\r\n        setDailyChart()\r\n        var mpostives = [0, 0, 0, 0, 0, 0, 0]\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] += parseInt(value.kesPositifBaru)\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n              type:'bar',\r\n              fill: false,\r\n              label: 'New Postive Cases',\r\n              data: mpostives,\r\n              backgroundColor: 'rgba(255, 211, 105, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setChartTitle('New Positive Cases')\r\n        setDaily(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className = 'default-chart-container'  style={{display: !isDaily ? 'block': 'none'}}>\r\n                {monthlyChart && <Bar data={monthlyChart} options={options} />}\r\n            </div>\r\n            <div className = 'default-chart-container'  style={{display: isDaily ? 'block': 'none'}}>\r\n                {dailyChart && <Bar data={dailyChart} options={dailyOpt} />}\r\n                <div className='monthly' onClick={()=>return_monthly()} style={{color:'white'}}>\r\n                Monthly\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Bar, Line } from 'react-chartjs-2'\r\n\r\nexport default function Death({overall, labelMonth, label_daily}) {\r\n\r\n    const [ isDaily, setDaily ] = useState()\r\n    const [ dailyChart , setDailyChart ] = useState()\r\n    const [ monthlyChart , setMonthlyChart ] = useState()\r\n    const [ chartTitle, setChartTitle ] = useState()\r\n\r\n    function setDailyView(att, month){\r\n        setMonthlyChart()\r\n        const days = label_daily(month)\r\n\r\n        var data = []\r\n        overall.forEach(row=>{\r\n            var m = parseInt(row.Tarikh.split('/')[1])-6\r\n            if(m == month){\r\n                data.push(row.jumlahKesMati)\r\n            }\r\n        })\r\n\r\n        setDaily(true)\r\n        setDailyChart({\r\n            labels: days,\r\n            datasets: [\r\n                {\r\n                    type:'line',\r\n                    fill: false,\r\n                    label: 'Death Cases',\r\n                    data: data,\r\n                    backgroundColor: 'rgba(240, 84, 84, 1)',\r\n                    borderColor: 'rgba(240, 84, 84, 1)',\r\n                    lineTension: '0.2'\r\n                },\r\n            ]\r\n        })\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        var mpostives = []\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] = value.jumlahKesMati\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n                type:'line',\r\n                fill: false,\r\n                label: 'Death Cases',\r\n                data: mpostives,\r\n                backgroundColor: 'rgba(240, 84, 84, 1)',\r\n                borderColor: 'rgba(240, 84, 84, 1)',\r\n                lineTension: '0.2'\r\n            },\r\n          ]\r\n        })\r\n        setDaily(false)\r\n        setChartTitle('Total Death')\r\n    }, [])\r\n\r\n\r\n    \r\n    var options = {\r\n        onClick: (event, elements) => {\r\n            if(elements.length>0){\r\n                const chart = elements[0]._chart;\r\n                const element = chart.getElementAtEvent(event)[0];\r\n                const xLabel = chart.data.labels[element._index];\r\n                const dataset = chart.data.datasets[element._datasetIndex];\r\n        \r\n                const month = labelMonth.indexOf(xLabel)\r\n    \r\n                console.log(dataset.label + month)\r\n        \r\n                if(element._datasetIndex == 0){\r\n                setDailyView(dataset.label, month)\r\n    \r\n                setChartTitle(`${dataset.label} for ${xLabel}`)\r\n            }\r\n\r\n            }\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Total Death',\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n            }]\r\n        } \r\n    }\r\n\r\n    var dailyOpt = {\r\n        title: {\r\n            display: true,\r\n            text: chartTitle,\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n            }]\r\n        } \r\n    }\r\n\r\n    function return_monthly(){\r\n        setDailyChart()\r\n        var mpostives = []\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] = value.jumlahKesMati\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n              type:'line',\r\n              fill: false,\r\n              label: 'Death Cases',\r\n              data: mpostives,\r\n              backgroundColor: 'rgba(240, 84, 84, 1)',\r\n              borderColor: 'rgba(240, 84, 84, 1)',\r\n              lineTension: '0.2'\r\n            },\r\n          ]\r\n        })\r\n        setChartTitle('New Positive Cases')\r\n        setDaily(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className = 'default-chart-container'  style={{display: !isDaily ? 'block': 'none'}}>\r\n                {monthlyChart && <Line data={monthlyChart} options={options} />}\r\n            </div>\r\n            <div className = 'default-chart-container'  style={{display: isDaily ? 'block': 'none'}}>\r\n                {dailyChart && <Line data={dailyChart} options={dailyOpt} />}\r\n                <div  className='monthly' onClick={()=>return_monthly()} style={{color:'white'}}>\r\n                Monthly\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\n\r\nexport default function Recovered({overall, labelMonth, label_daily}) {\r\n\r\n    const [ isDaily, setDaily ] = useState()\r\n    const [ dailyChart , setDailyChart ] = useState()\r\n    const [ monthlyChart , setMonthlyChart ] = useState()\r\n    const [ chartTitle, setChartTitle ] = useState()\r\n\r\n    function setDailyView(att, month){\r\n        setMonthlyChart()\r\n        const days = label_daily(month)\r\n\r\n        var data = []\r\n        overall.forEach(row=>{\r\n            var m = parseInt(row.Tarikh.split('/')[1])-6\r\n            if(m == month){\r\n                data.push(row.jumlahTelahSembuhDiscaj)\r\n            }\r\n        })\r\n\r\n        setDaily(true)\r\n        setDailyChart({\r\n            labels: days,\r\n            datasets: [\r\n            {\r\n                type:'bar',\r\n                fill: false,\r\n                label: att,\r\n                data: data,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n            ]\r\n        })\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        var mpostives = []\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] = value.jumlahTelahSembuhDiscaj\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n                type:'bar',\r\n                fill: false,\r\n                label: 'Recovered and Discharged',\r\n                data: mpostives,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setDaily(false)\r\n        setChartTitle('Total Recovered and Discharged')\r\n    }, [])\r\n\r\n\r\n    \r\n    var options = {\r\n        onClick: (event, elements) => {\r\n            const chart = elements[0]._chart;\r\n            const element = chart.getElementAtEvent(event)[0];\r\n            const xLabel = chart.data.labels[element._index];\r\n            const dataset = chart.data.datasets[element._datasetIndex];\r\n    \r\n            const month = labelMonth.indexOf(xLabel)\r\n\r\n            console.log(dataset.label + month)\r\n    \r\n            if(element._datasetIndex == 0){\r\n            setDailyView(dataset.label, month)\r\n\r\n            setChartTitle(`${dataset.label} for ${xLabel}`)\r\n\r\n            }\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Total Recovered and Discharged',\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n            }]\r\n        } \r\n    }\r\n\r\n    var dailyOpt = {\r\n        title: {\r\n            display: true,\r\n            text: chartTitle,\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n            }]\r\n        } \r\n    }\r\n\r\n    function return_monthly(){\r\n        setDailyChart()\r\n        var mpostives = []\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] = value.jumlahTelahSembuhDiscaj\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n                type:'bar',\r\n                fill: false,\r\n                label: 'Recovered and Discharged',\r\n                data: mpostives,\r\n                backgroundColor: 'rgba(22, 199, 154, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setChartTitle('Total Recovered and Discharged')\r\n        setDaily(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className = 'default-chart-container'  style={{display: !isDaily ? 'block': 'none'}}>\r\n                {monthlyChart && <Bar data={monthlyChart} options={options} />}\r\n            </div>\r\n            <div className = 'default-chart-container'  style={{display: isDaily ? 'block': 'none'}}>\r\n                {dailyChart && <Bar data={dailyChart} options={dailyOpt} />}\r\n                <div className='monthly' onClick={()=>return_monthly()} style={{color:'white'}}>\r\n                Monthly\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Bar, HorizontalBar } from 'react-chartjs-2'\r\n\r\nexport default function PUI({overall, labelMonth, label_daily}) {\r\n\r\n    const [ isDaily, setDaily ] = useState()\r\n    const [ dailyChart , setDailyChart ] = useState()\r\n    const [ monthlyChart , setMonthlyChart ] = useState()\r\n    const [ chartTitle, setChartTitle ] = useState()\r\n\r\n    function setDailyView(att, month){\r\n        setMonthlyChart()\r\n        const days = label_daily(month)\r\n\r\n        var data = []\r\n        overall.forEach(row=>{\r\n            var m = parseInt(row.Tarikh.split('/')[1])-6\r\n            if(m == month){\r\n                data.push(row.jumlahKesPUI)\r\n            }\r\n        })\r\n\r\n        setDaily(true)\r\n        setDailyChart({\r\n            labels: days,\r\n            datasets: [\r\n            {\r\n                type:'bar',\r\n                fill: false,\r\n                label: att,\r\n                data: data,\r\n                backgroundColor: 'rgba(255, 123, 84, 1)',\r\n            },\r\n            ]\r\n        })\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        var mpostives = []\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] = value.jumlahKesPUI\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n              type:'bar',\r\n              fill: false,\r\n              label: 'Total PUI Cases',\r\n              data: mpostives,\r\n              backgroundColor: 'rgba(255, 123, 84, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setDaily(false)\r\n        setChartTitle('Total PUI Cases')\r\n    }, [])\r\n\r\n\r\n    \r\n    var options = {\r\n        onClick: (event, elements) => {\r\n            const chart = elements[0]._chart;\r\n            const element = chart.getElementAtEvent(event)[0];\r\n            const xLabel = chart.data.labels[element._index];\r\n            const dataset = chart.data.datasets[element._datasetIndex];\r\n    \r\n            const month = labelMonth.indexOf(xLabel)\r\n\r\n            console.log(dataset.label + month)\r\n    \r\n            if(element._datasetIndex == 0){\r\n            setDailyView(dataset.label, month)\r\n\r\n            setChartTitle(`${dataset.label} for ${xLabel}`)\r\n\r\n            }\r\n        },\r\n        title: {\r\n            display: true,\r\n            text: 'Total PUI Cases',\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n            }]\r\n        } \r\n    }\r\n\r\n    var dailyOpt = {\r\n        title: {\r\n            display: true,\r\n            text: chartTitle,\r\n            fontColor: 'white',\r\n            fontSize: 17\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontColor: 'white'\r\n            },\r\n            position: 'bottom'\r\n        },\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero:true,\r\n                    fontColor: 'white'\r\n                },\r\n            }],\r\n            xAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: 'white'\r\n                },\r\n            }]\r\n        } \r\n    }\r\n\r\n    function return_monthly(){\r\n        setDailyChart()\r\n        var mpostives = []\r\n        overall.forEach(value=>{\r\n            var month = parseInt(value.Tarikh.split('/')[1]-6)\r\n            mpostives[month] = value.jumlahKesPUI\r\n        })\r\n        \r\n        setMonthlyChart({\r\n          labels: labelMonth,\r\n          datasets: [\r\n            {\r\n              type:'bar',\r\n              fill: false,\r\n              label: 'PUI Cases Cases',\r\n              data: mpostives,\r\n              backgroundColor: 'rgba(255, 123, 84, 1)',\r\n            },\r\n          ]\r\n        })\r\n        setChartTitle('Total PUI Cases')\r\n        setDaily(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className = 'default-chart-container'  style={{display: !isDaily ? 'block': 'none'}}>\r\n                {monthlyChart && <Bar data={monthlyChart} options={options} />}\r\n            </div>\r\n            <div className = 'default-chart-container'  style={{display: isDaily ? 'block': 'none'}}>\r\n                {dailyChart && <Bar data={dailyChart} options={dailyOpt} />}\r\n                <div className='monthly' onClick={()=>return_monthly()} style={{color:'white'}}>\r\n                Monthly\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport overall_data from './data/overall-statistics.csv';\nimport hospital_data from './data/hospital-data.csv'; \nimport { csv } from \"d3\";\nimport { useEffect, useState } from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport PositiveCases from './PositiveCases';\nimport Death from './Death';\nimport Recovered from './Recovered';\nimport PUI from './PUI';\n\nfunction App() {\n\n  const [ loadingData, setLoadingData ] = useState(true)\n  const [ overall, setOverall ] = useState()\n  const [ hospital, setHospital ] = useState()\n  const [ isDefault, setDefault ] = useState()\n  const [ buttonVal, setButtonVal ] = useState()\n\n  const labelMonth = [\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ]\n\n  function label_daily(month){\n    var days = 0\n    var arrDay = []\n    switch (month) {\n      case 0: days=30; break;\n      case 1: days=31; break;\n      case 2: days=31; break;\n      case 3: days=30; break;\n      case 4: days=31; break;\n      case 5: days=30; break;\n      case 6: days=31; break;\n    }\n\n    for(var i = 1; i < days+1; i ++){\n      arrDay.push(i)\n    }\n    return arrDay\n  }\n\n  //get data for all month (jumlah kes positif x jumlah recovered)\n  useEffect(()=>{\n    if(loadingData)\n    Promise.all([csv(overall_data), csv(hospital_data)]).then(results=>{\n      var data  = { np: 0, it: 0, npui: 0, ppui: 0 }\n      var oFinal = results[0][results[0].length-1]\n      var hFinal = results[1][results[1].length-1]\n      data.np = oFinal.jumlahKesPositif\n      data.it = hFinal.dirawatJumlah\n      data.npui = oFinal.kesPUINegatif\n      data.ppui = oFinal.kesPUIPending\n      setButtonVal(data)\n      setOverall(results[0])\n      setHospital(results[1])\n      setDefault(true)\n      setLoadingData(false)\n\n    })\n  }, [])\n\n  return (\n    <div className=\"container lilita\">\n\n      <div className='brand-name' onClick={()=>setDefault(true)}>\n          Sarawak COVID-19 Data Visualization Dashboard\n          <div className=\"brand-date\">\n            (June 2020 - December 2020)\n            <br/>By Group B\n          </div>\n      </div>\n\n      <div className='top-nav' onClick={()=>setDefault(false)} style={{fontSize:'12px'}}>\n        <div className='button'>\n            <div className='value' style={{backgroundColor:'#ffa45b'}}>\n              {buttonVal && buttonVal.np}\n            </div>\n            Total Positive Cases\n        </div>\n        <div className='button'>\n            <div className='value' style={{backgroundColor:'#ff884b'}}>\n              {buttonVal && buttonVal.it}\n            </div>\n            In Treatment\n        </div>\n        <div className='button'>\n            <div className='value' style={{backgroundColor: '#16c79a'}}>\n              {buttonVal && buttonVal.npui}\n            </div>\n            Total Negative PUI Cases\n        </div>\n        <div className='button'>\n            <div className='value' style={{backgroundColor: '#a6a9b6'}}>\n              {buttonVal && buttonVal.ppui}\n            </div>\n            Total Pending PUI Cases\n        </div>\n      </div>\n\n      <div className='vars' style={{display: !isDefault ? 'flex' : 'none'}}>\n          not default view\n      </div>\n      <div className='default' style={{display: isDefault ? 'flex' : 'none', flexDirection:'row'}}>\n        <div className='row-1' style={{display: 'flex', flexDirection: 'column'}}>\n            <div className='default-chart new-cases'>\n              { overall && <PositiveCases overall={overall} labelMonth={labelMonth} label_daily={label_daily} />}\n            </div>\n            <div className='default-chart recovered'>\n              { overall && <Recovered overall={overall} labelMonth={labelMonth} label_daily={label_daily} />}\n            </div>\n        </div>\n        <div className='row-2' style={{display: 'flex', flexDirection: 'column'}}>\n            <div className='default-chart pui'>\n              { overall && <PUI overall={overall} labelMonth={labelMonth} label_daily={label_daily} />}\n            </div>\n            <div className='default-chart death'>\n              { overall && <Death overall={overall} labelMonth={labelMonth} label_daily={label_daily} />}\n            </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}